import 'package:flutter/material.dart';
import 'package:note_ai/models/note_model.dart';
import 'package:note_ai/services/firebase_service.dart';

class TextNoteScreen extends StatefulWidget {
  const TextNoteScreen({super.key});

  @override
  State<TextNoteScreen> createState() => _TextNoteScreenState();
}

class _TextNoteScreenState extends State<TextNoteScreen> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _contentController = TextEditingController();

  bool isSaving = false;
  String? aiSummary;
  DateTime? reminderTime;

  Future<void> _saveNote() async {
    if (_titleController.text.trim().isEmpty || _contentController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Title and content are required')),
      );
      Navigator.pushNamedAndRemoveUntil(context, '/', (route) => false);
    }

    setState(() => isSaving = true);

    final note = NoteModel(
      id: '',
      title: _titleController.text.trim(),
      content: _contentController.text.trim(),
      type: 'text',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      summary: aiSummary,
      aiAnswer: null,
      reminderTime: reminderTime,
    );

    await FirebaseService().addNote(note);

    setState(() => isSaving = false);

    Navigator.pop(context);
  }

  Future<void> _setReminder() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now().add(Duration(days: 1)),
      firstDate: DateTime.now(),
      lastDate: DateTime(2100),
    );

    if (picked != null) {
      final TimeOfDay? time = await showTimePicker(
        context: context,
        initialTime: TimeOfDay.now(),
      );

      if (time != null) {
        setState(() {
          reminderTime = DateTime(
            picked.year,
            picked.month,
            picked.day,
            time.hour,
            time.minute,
          );
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Text Note'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: isSaving ? null : _saveNote,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            TextField(
              controller: _titleController,
              decoration: const InputDecoration(labelText: 'Title'),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _contentController,
              decoration: const InputDecoration(labelText: 'Content'),
              maxLines: 8,
            ),
            const SizedBox(height: 12),
            ElevatedButton.icon(
              icon: const Icon(Icons.access_alarm),
              label: Text(reminderTime == null
                  ? 'Set Reminder'
                  : 'Reminder: ${reminderTime.toString().split('.')[0]}'),
              onPressed: _setReminder,
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              icon: const Icon(Icons.auto_fix_high),
              label: const Text('Get AI Summary'),
              onPressed: () async {
                // TODO: Call your AI summarization logic here
                setState(() {
                  aiSummary = 'This is a placeholder summary generated by AI.';
                });
              },
            ),
            if (aiSummary != null) ...[
              const SizedBox(height: 16),
              const Text('AI Summary:', style: TextStyle(fontWeight: FontWeight.bold)),
              const SizedBox(height: 8),
              Text(aiSummary!),
            ]
          ],
        ),
      ),
    );
  }
}
